ž
ED:\Objectives\AOP\Demos\AOP.Interceptor\AOP.Interceptor\Calculator.cs
	namespace 	
AOP
 
. 
Interceptor 
{		 
[ 
	Intercept 
( 
typeof 
( 
Logger 
) 
) 
] 
public 

class 

Calculator 
: 
ICalculator )
{ 
public 
int 
Add 
( 
int 
a 
, 
int !
b" #
)# $
{ 	
return 
a 
+ 
b 
; 
} 	
public 
int 
Divide 
( 
int 
a 
,  
int! $
b% &
)& '
{ 	
return 
a 
/ 
b 
; 
} 	
public 
int 
Multiply 
( 
int 
a  !
,! "
int# &
b' (
)( )
{ 	
return 
a 
* 
b 
; 
} 	
public 
int 
Subtract 
( 
int 
a  !
,! "
int# &
b' (
)( )
{ 	
return 
a 
- 
b 
; 
}   	
}!! 
}"" —
FD:\Objectives\AOP\Demos\AOP.Interceptor\AOP.Interceptor\ICalculator.cs
	namespace 	
AOP
 
. 
Interceptor 
{		 
public 

	interface 
ICalculator  
{ 
int 
Add 
( 
int 
a 
, 
int 
b 
) 
; 
int 
Subtract 
( 
int 
a 
, 
int 
b  !
)! "
;" #
int 
Multiply 
( 
int 
a 
, 
int 
b  !
)! "
;" #
int 
Divide 
( 
int 
a 
, 
int 
b 
)  
;  !
} 
} ’
BD:\Objectives\AOP\Demos\AOP.Interceptor\AOP.Interceptor\LoggerX.cs
	namespace 	
AOP
 
. 
Interceptor 
{ 
public 

class 
LoggerX 
: 
IInterceptor '
{		 

TextWriter

 
writer

 
;

 
public 
LoggerX 
( 

TextWriter !
writer" (
)( )
{ 	
if 
( 
writer 
== 
null 
) 
{ 
throw 
new !
ArgumentNullException /
(/ 0
nameof0 6
(6 7
writer7 =
)= >
)> ?
;? @
} 
this 
. 
writer 
= 
writer  
;  !
} 	
public 
void 
	Intercept 
( 
IInvocation )

invocation* 4
)4 5
{ 	
try 
{ 
Console 
. 
	WriteLine !
(! "
$str" ,
), -
;- .

invocation 
. 
Proceed "
(" #
)# $
;$ %
Console 
. 
	WriteLine !
(! "
$str" .
). /
;/ 0
} 
catch 
( 
	Exception 
e 
) 
{ 
Console 
. 
	WriteLine !
(! "
$str" 0
)0 1
;1 2
throw   
;   
}!! 
finally"" 
{## 
Console$$ 
.$$ 
	WriteLine$$ !
($$! "
$str$$" +
)$$+ ,
;$$, -
}%% 
}&& 	
}'' 
}(( Ë
AD:\Objectives\AOP\Demos\AOP.Interceptor\AOP.Interceptor\Logger.cs
	namespace 	
AOP
 
. 
Interceptor 
{ 
public 

class 
Logger 
: 
IInterceptor &
{		 

TextWriter

 
writer

 
;

 
public 
Logger 
( 

TextWriter  
writer! '
)' (
{ 	
if 
( 
writer 
== 
null 
) 
{ 
throw 
new !
ArgumentNullException /
(/ 0
nameof0 6
(6 7
writer7 =
)= >
)> ?
;? @
} 
this 
. 
writer 
= 
writer  
;  !
} 	
public 
void 
	Intercept 
( 
IInvocation )

invocation* 4
)4 5
{ 	
try 
{ 
Console 
. 
	WriteLine !
(! "
$"" $
Start: $ +
{+ ,

invocation, 6
.6 7
Method7 =
.= >
DeclaringType> K
}K L
.L M
{M N

invocationN X
.X Y
MethodY _
._ `
Name` d
}d e
"e f
)f g
;g h
Console 
. 
	WriteLine !
(! "
$"" $
Args: $ *
{* +
string+ 1
.1 2
Join2 6
(6 7
$str7 ;
,; <

invocation= G
.G H
	ArgumentsH Q
.Q R
SelectR X
(X Y
aY Z
=>[ ]
(^ _
a_ `
??a c
$strd f
)f g
.g h
ToStringh p
(p q
)q r
)r s
)s t
}t u
"u v
)v w
;w x

invocation 
. 
Proceed "
(" #
)# $
;$ %
Console 
. 
	WriteLine !
(! "
$"" $ 
Success: result was $ 8
{8 9

invocation9 C
.C D
ReturnValueD O
}O P
"P Q
)Q R
;R S
} 
catch 
( 
	Exception 
e 
) 
{   
Console!! 
.!! 
	WriteLine!! !
(!!! "
$"!!" $
Exception: !!$ /
{!!/ 0
e!!0 1
.!!1 2
Message!!2 9
}!!9 :
"!!: ;
)!!; <
;!!< =
throw"" 
;"" 
}## 
finally$$ 
{%% 
Console&& 
.&& 
	WriteLine&& !
(&&! "
$"&&" $
Exit: &&$ *
{&&* +

invocation&&+ 5
.&&5 6
Method&&6 <
.&&< =
DeclaringType&&= J
}&&J K
.&&K L
{&&L M

invocation&&M W
.&&W X
Method&&X ^
.&&^ _
Name&&_ c
}&&c d
"&&d e
)&&e f
;&&f g
}'' 
}(( 	
})) 
}** Ç
BD:\Objectives\AOP\Demos\AOP.Interceptor\AOP.Interceptor\Program.cs
	namespace

 	
AOP


 
.

 
Interceptor

 
{ 
class 	
Program
 
{ 
static 
void 
Main 
( 
string 
[  
]  !
args" &
)& '
{ 	
try 
{ 
var 
builder 
= 
new !
ContainerBuilder" 2
(2 3
)3 4
;4 5
builder 
. 
Register  
(  !
i! "
=># %
new& )
Logger* 0
(0 1
Console1 8
.8 9
Out9 <
)< =
)= >
;> ?
builder 
. 
Register  
(  !
i! "
=># %
new& )
LoggerX* 1
(1 2
Console2 9
.9 :
Out: =
)= >
)> ?
;? @
builder 
. 
RegisterType $
<$ %

Calculator% /
>/ 0
(0 1
)1 2
. 
As 
< 
ICalculator &
>& '
(' (
)( )
. '
EnableInterfaceInterceptors 3
(3 4
)4 5
. 
InterceptedBy %
(% &
typeof& ,
(, -
LoggerX- 4
)4 5
)5 6
. 
InterceptedBy %
(% &
typeof& ,
(, -
Logger- 3
)3 4
)4 5
;5 6
var 
	container 
= 
builder  '
.' (
Build( -
(- .
). /
;/ 0
var   
calc   
=   
	container   $
.  $ %
Resolve  % ,
<  , -
ICalculator  - 8
>  8 9
(  9 :
)  : ;
;  ; <
calc"" 
."" 
Add"" 
("" 
$num"" 
,"" 
$num"" 
)"" 
;"" 
Console$$ 
.$$ 
	WriteLine$$ !
($$! "
)$$" #
;$$# $
calc&& 
.&& 
Divide&& 
(&& 
$num&& 
,&& 
$num&&  
)&&  !
;&&! "
}'' 
catch(( 
((( 
	Exception(( 
ex(( 
)((  
{)) 
}** 
Console-- 
.-- 
ReadLine-- 
(-- 
)-- 
;-- 
}.. 	
}// 
}00 ý
RD:\Objectives\AOP\Demos\AOP.Interceptor\AOP.Interceptor\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str *
)* +
]+ ,
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str ,
), -
]- .
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *